/// <reference types="Cypress" />

describe('Central de Atendimento ao Cliente TAT', function() {
    beforeEach(()=>{
        cy.visit('./src/index.html')
    })
    it('verifica o título da aplicação', function() {
        cy.title().should('eq', 'Central de Atendimento ao Cliente TAT')
    })
    it('preenche os campos obrigatórios e envia o formulário', function() {
        cy.title().should('eq', 'Central de Atendimento ao Cliente TAT')
        cy.contains('div', 'Nome')
            .type('Fulano')
        cy.get('#lastName')
            .type('de Tal')
        cy.get('#email')
            .type('fulanodetal@gmail.com')
        cy.get('#open-text-area')
            .type('Mensagem de teste', ({delay: 0}))
        cy.get('button[type="submit"]')
            .click()
        cy.get('.success')
            .should('contains.text', 'Mensagem enviada com sucesso.')
            .should('be.visible')
    })
    it('exibe mensagem de erro ao submeter o formulário com um email com formatação inválida', function() {
        cy.title().should('eq', 'Central de Atendimento ao Cliente TAT')
        cy.get('#firstName')
            .type('Fulano')
        cy.get('#lastName')
            .type('de Tal')
        cy.get('#email')
            .type('fulanodetalgmail.com')
        cy.get('#open-text-area')
            .type('Mensagem de teste', ({delay: 0}))
        cy.get('button[type="submit"]')
            .click()
        cy.get('.error')
            .should('contains.text', 'Valide os campos obrigatórios!')
            .should('be.visible')
    })
    it('exibe mensagem de erro quando o telefone se torna obrigatório mas não é preenchido antes do envio do formulário', function() {
        cy.title().should('eq', 'Central de Atendimento ao Cliente TAT')
        cy.get('#firstName')
            .type('Fulano')
        cy.get('#lastName')
            .type('de Tal')
        cy.get('#email')
            .type('fulanodetalgmail.com')
        cy.get('#open-text-area')
            .type('Mensagem de teste', ({delay: 0}))
        cy.get('#phone')
            .type('aaaaaa').and('have.value', '')
        cy.get('#phone-checkbox')
            .check().and('be.checked')
        cy.get('button[type="submit"]')
            .click()
        cy.get('.error')
            .should('contains.text', 'Valide os campos obrigatórios!')
            .should('be.visible')
    })
    it('preenche e limpa os campos nome, sobrenome, email e telefone', function() {
        cy.title().should('eq', 'Central de Atendimento ao Cliente TAT')
        cy.get('#firstName')
            .type('Fulano')
            .should('have.value', 'Fulano')
            .clear()
            .should('have.value', '')
        cy.get('#lastName')
            .type('de Tal')
            .should('have.value', 'de Tal')
            .clear()
            .should('have.value', '')
        cy.get('#email')
            .type('fulanodetalgmail.com')
            .should('have.value', 'fulanodetalgmail.com')
            .clear()
            .should('have.value', '')
        cy.get('#open-text-area')
            .type('Mensagem de teste', ({delay: 0}))
            .should('have.value', 'Mensagem de teste')
            .clear()
            .should('have.value', '')
        cy.get('button[type="submit"]')
            .click()
        cy.get('.error')
            .should('contains.text', 'Valide os campos obrigatórios!')
            .should('be.visible')
    })
    it('exibe mensagem de erro ao submeter o formulário sem preencher os campos obrigatórios', function() {
        cy.title().should('eq', 'Central de Atendimento ao Cliente TAT')
        cy.get('#firstName')
            .should('have.value', '')
        cy.get('#lastName')
            .should('have.value', '')
        cy.get('#email')
            .should('have.value', '')
        cy.get('#open-text-area')
            .should('have.value', '')
        cy.get('button[type="submit"]')
            .click()
        cy.get('.error')
            .should('contains.text', 'Valide os campos obrigatórios!')
            .should('be.visible')
    })
    it('envia o formuário com sucesso usando um comando customizado', function() {
        cy.fillMandatoryFieldsAndSubmit('Fulano', 'de Tal', 'fulanodetal@gmail.com', 'Mensagem de teste')
    })

    it('seleciona um produto (YouTube) por seu texto', function() {
        cy.get('#product')
            .select('YouTube')
            .should('have.value', 'youtube')
    })
    it('seleciona um produto (Mentoria) por seu valor (value)', function() {
        cy.get('#product')
            .select('mentoria')
            .should('have.value', 'mentoria')
    })
    it('seleciona um produto (Blog) por seu índice', function() {
        cy.get('#product')
            .select((1))
            .should('have.value', 'blog')
    })
    it('marca o tipo de atendimento "Feedback"', function() {
        cy.get('input[type="radio"]')
            .check('feedback')
            .should('be.checked')
    })
    it('marca cada tipo de atendimento', function() {
        cy.get('input[type="radio"]')
            .should('have.length', 3)
            .each(function($radio){
                cy.wrap($radio)
                    .check()
                    .should('be.checked')
            })
    })
    it('marca ambos checkboxes, depois desmarca o último', function() {
        cy.get('input[type="checkbox"]')
            .check()
            .should('be.checked')
            .last()
            .uncheck()
            .should('not.be.checked')
    })

    it('seleciona um arquivo da pasta fixtures', function() {
        cy.get('#file-upload')
            .selectFile('./cypress/fixtures/example.json')
            .should(function($input){
                console.log($input)
                expect($input[0].files[0].name).to.eq('example.json')
            })
    })

    it('seleciona um arquivo simulando um drag-and-drop', function() {
        cy.get('#file-upload')
        .should('not.have.value')
            .selectFile('./cypress/fixtures/example.json', {action: 'drag-drop'})
            .should(function($input){
                console.log($input)
                expect($input[0].files[0].name).to.eq('example.json')
            })
    })

    it('seleciona um arquivo utilizando uma fixture para a qual foi dada um alias', function() {
        cy.fixture('example').as('example')
        cy.get('#file-upload')
        .should('not.have.value')
            .selectFile('@example', {action: 'drag-drop'})
            .should(function($input){
                console.log($input)
                expect($input[0].files[0].name).to.eq('example')
            })
    })
    it('Verifica que a política de privacidade abre em outra aba sem a necessidade de um clique', function() {
        cy.get('a[href="privacy.html"]')
            .should('have.attr', 'target', '_blank')
    })
    it('acessa a página da política de privacidade removendo o target e então clicando no link', function() {
        cy.get('a[href="privacy.html"]')
            .should('have.attr', 'target', '_blank')
            .invoke('removeAttr', 'target')
            .click()
        cy.url()
            .should('include', 'privacy.html')
    })

    it('testa a página da política de privacidade de forma independente', function() {
        cy.get('a[href="privacy.html"]')
            .should('have.attr', 'target', '_blank')
            .invoke('removeAttr', 'target')
            .click()
        cy.url()
            .should('include', 'privacy.html')
        cy.get('#title')
            .should('have.text', 'CAC TAT - Política de privacidade')
            .and('be.visible')
    })

    Cypress._.times(10, () => {
    it('exibe mensagem por 3 segundos', function() {
        cy.clock()
        cy.title().should('eq', 'Central de Atendimento ao Cliente TAT')
        cy.contains('div', 'Nome')
            .type('Fulano')
        cy.get('#lastName')
            .type('de Tal')
        cy.get('#email')
            .type('fulanodetal@gmail.com')
        cy.get('#open-text-area')
            .type('Mensagem de teste', ({delay: 0}))
        cy.get('button[type="submit"]')
            .click()
        cy.get('.success')
            .should('contains.text', 'Mensagem enviada com sucesso.')
            .should('be.visible')
        cy.tick(3000)
        cy.get('.success')
            .should('not.be.visible')
        })
    })

    it('exibe e esconde as mensagens de sucesso e erro usando o .invoke', () => {
        cy.get('.success')
          .should('not.be.visible')
          .invoke('show')
          .should('be.visible')
          .and('contain', 'Mensagem enviada com sucesso.')
          .invoke('hide')
          .should('not.be.visible')
        cy.get('.error')
          .should('not.be.visible')
          .invoke('show')
          .should('be.visible')
          .and('contain', 'Valide os campos obrigatórios!')
          .invoke('hide')
          .should('not.be.visible')
      })
    
    it('preenche a area de texto usando o comando invoke', () => {
        const longtext = Cypress._.repeat('1234567890', 20)
        cy.get('#open-text-area')
          .invoke('val', longtext)
          .should('have.value', longtext)
    })

    it('faz uma requisição HTTP', () => {
        cy.request('https://cac-tat.s3.eu-central-1.amazonaws.com/index.html')
            .should((response) => {
                expect(response.status).to.eq(200)
                expect(response.body).and.to.include('CAC TAT')
            })
    })

    it.only('encontre o gato', () => {
        cy.get('#cat')
            .invoke('show')
            .should('be.visible')
        cy.get('#title')
            .invoke('text', 'CAT TAT')
        cy.get('#subtitle')
            .invoke('text', 'EU AMO GATOS')
    })
  })
